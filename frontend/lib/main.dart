import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Import FirebaseAuth
import 'package:cloud_firestore/cloud_firestore.dart'; // Import CloudFirestore
import 'package:cogni_loop/firebase_options.dart'; // This file will be generated by flutterfire configure
import 'package:cogni_loop/screens/authentication/login_screen.dart';
import 'package:cogni_loop/screens/authentication/register_screen.dart';
import 'package:cogni_loop/screens/authentication/forgot_password_screen.dart';
import 'package:cogni_loop/screens/main_navigation_screen.dart';
import 'package:cogni_loop/screens/onboarding/onboarding_screen.dart';
import 'package:cogni_loop/screens/onboarding/user_profile_setup_screen.dart';
import 'package:cogni_loop/utils/app_theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CogniLoop',
      theme: appTheme,
      home: StreamBuilder<User?>( // Use StreamBuilder to listen for auth state changes
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator()); // Show loading indicator
          }
          if (snapshot.hasData) {
            // User is logged in
            return FutureBuilder<DocumentSnapshot<Map<String, dynamic>>>(
              future: FirebaseFirestore.instance.collection('users').doc(snapshot.data!.uid).get(),
              builder: (context, userDocSnapshot) {
                if (userDocSnapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (userDocSnapshot.hasData && userDocSnapshot.data!.exists) {
                  final userData = userDocSnapshot.data!.data();
                  if (userData != null && userData['hasCompletedOnboarding'] == true) {
                    return const MainNavigationScreen(); // Use main navigation instead of just home
                  } else {
                    return const UserProfileSetupScreen(); // Onboarding not completed
                  }
                } else if (userDocSnapshot.hasError) {
                  return const Center(child: Text('Failed to load user data. Please try again later.', style: TextStyle(color: Colors.red)));
                } else {
                  // User document not found, implies new user or an error, direct to onboarding for questions
                  return const UserProfileSetupScreen();
                }
              },
            );
          } else {
            // User is not logged in
            return const OnboardingScreen(); // Show onboarding for new users
          }
        },
      ),
      routes: {
        '/onboarding': (context) => const OnboardingScreen(),
        '/login': (context) => const LoginScreen(), // Login screen will be accessible via direct route if needed, though initial flow handles it
        '/register': (context) => const RegisterScreen(),
        '/forgot_password': (context) => const ForgotPasswordScreen(),
        '/home': (context) => const MainNavigationScreen(),
        '/user_profile_setup': (context) => const UserProfileSetupScreen(),
      },
    );
  }
}
